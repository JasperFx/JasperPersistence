// <auto-generated/>
#pragma warning disable
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Marten.Testing.Acceptance;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertPropVersionedDocOperation1713479038
    public class UpsertPropVersionedDocOperation1713479038 : Marten.Internal.Operations.StorageOperation<Marten.Testing.Acceptance.PropVersionedDoc, int>
    {
        private readonly Marten.Testing.Acceptance.PropVersionedDoc _document;
        private readonly int _id;
        private readonly System.Collections.Generic.Dictionary<int, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertPropVersionedDocOperation1713479038(Marten.Testing.Acceptance.PropVersionedDoc document, int id, System.Collections.Generic.Dictionary<int, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_upsert_propversioneddoc(?, ?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session)
        {
            document.Version = _version;
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
                _document.Version = _version;
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
                _document.Version = _version;
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }

    }

    // END: UpsertPropVersionedDocOperation1713479038
    
    
    // START: InsertPropVersionedDocOperation1713479038
    public class InsertPropVersionedDocOperation1713479038 : Marten.Internal.Operations.StorageOperation<Marten.Testing.Acceptance.PropVersionedDoc, int>
    {
        private readonly Marten.Testing.Acceptance.PropVersionedDoc _document;
        private readonly int _id;
        private readonly System.Collections.Generic.Dictionary<int, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertPropVersionedDocOperation1713479038(Marten.Testing.Acceptance.PropVersionedDoc document, int id, System.Collections.Generic.Dictionary<int, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_insert_propversioneddoc(?, ?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session)
        {
            document.Version = _version;
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
                _document.Version = _version;
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
                _document.Version = _version;
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }

    }

    // END: InsertPropVersionedDocOperation1713479038
    
    
    // START: UpdatePropVersionedDocOperation1713479038
    public class UpdatePropVersionedDocOperation1713479038 : Marten.Internal.Operations.StorageOperation<Marten.Testing.Acceptance.PropVersionedDoc, int>
    {
        private readonly Marten.Testing.Acceptance.PropVersionedDoc _document;
        private readonly int _id;
        private readonly System.Collections.Generic.Dictionary<int, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdatePropVersionedDocOperation1713479038(Marten.Testing.Acceptance.PropVersionedDoc document, int id, System.Collections.Generic.Dictionary<int, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_update_propversioneddoc(?, ?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session)
        {
            document.Version = _version;
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
                _document.Version = _version;
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
                _document.Version = _version;
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }

    }

    // END: UpdatePropVersionedDocOperation1713479038
    
    
    // START: QueryOnlyPropVersionedDocSelector1713479038
    public class QueryOnlyPropVersionedDocSelector1713479038 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<Marten.Testing.Acceptance.PropVersionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyPropVersionedDocSelector1713479038(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Marten.Testing.Acceptance.PropVersionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {

            Marten.Testing.Acceptance.PropVersionedDoc document;
            document = _serializer.FromJson<Marten.Testing.Acceptance.PropVersionedDoc>(reader, 0);
            var version = reader.GetFieldValue<System.Guid>(1);
            document.Version = version;
            return document;
        }


        public async System.Threading.Tasks.Task<Marten.Testing.Acceptance.PropVersionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            Marten.Testing.Acceptance.PropVersionedDoc document;
            document = await _serializer.FromJsonAsync<Marten.Testing.Acceptance.PropVersionedDoc>(reader, 0, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<System.Guid>(1, token);
            document.Version = version;
            return document;
        }

    }

    // END: QueryOnlyPropVersionedDocSelector1713479038
    
    
    // START: LightweightPropVersionedDocSelector1713479038
    public class LightweightPropVersionedDocSelector1713479038 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<Marten.Testing.Acceptance.PropVersionedDoc, int>, Marten.Linq.Selectors.ISelector<Marten.Testing.Acceptance.PropVersionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightPropVersionedDocSelector1713479038(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Marten.Testing.Acceptance.PropVersionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<int>(0);

            Marten.Testing.Acceptance.PropVersionedDoc document;
            document = _serializer.FromJson<Marten.Testing.Acceptance.PropVersionedDoc>(reader, 1);
            var version = reader.GetFieldValue<System.Guid>(2);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<Marten.Testing.Acceptance.PropVersionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<int>(0, token);

            Marten.Testing.Acceptance.PropVersionedDoc document;
            document = await _serializer.FromJsonAsync<Marten.Testing.Acceptance.PropVersionedDoc>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<System.Guid>(2, token);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightPropVersionedDocSelector1713479038
    
    
    // START: IdentityMapPropVersionedDocSelector1713479038
    public class IdentityMapPropVersionedDocSelector1713479038 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<Marten.Testing.Acceptance.PropVersionedDoc, int>, Marten.Linq.Selectors.ISelector<Marten.Testing.Acceptance.PropVersionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapPropVersionedDocSelector1713479038(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Marten.Testing.Acceptance.PropVersionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<int>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Marten.Testing.Acceptance.PropVersionedDoc document;
            document = _serializer.FromJson<Marten.Testing.Acceptance.PropVersionedDoc>(reader, 1);
            var version = reader.GetFieldValue<System.Guid>(2);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<Marten.Testing.Acceptance.PropVersionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<int>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Marten.Testing.Acceptance.PropVersionedDoc document;
            document = await _serializer.FromJsonAsync<Marten.Testing.Acceptance.PropVersionedDoc>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<System.Guid>(2, token);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapPropVersionedDocSelector1713479038
    
    
    // START: DirtyTrackingPropVersionedDocSelector1713479038
    public class DirtyTrackingPropVersionedDocSelector1713479038 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<Marten.Testing.Acceptance.PropVersionedDoc, int>, Marten.Linq.Selectors.ISelector<Marten.Testing.Acceptance.PropVersionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingPropVersionedDocSelector1713479038(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Marten.Testing.Acceptance.PropVersionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<int>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Marten.Testing.Acceptance.PropVersionedDoc document;
            document = _serializer.FromJson<Marten.Testing.Acceptance.PropVersionedDoc>(reader, 1);
            var version = reader.GetFieldValue<System.Guid>(2);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<Marten.Testing.Acceptance.PropVersionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<int>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Marten.Testing.Acceptance.PropVersionedDoc document;
            document = await _serializer.FromJsonAsync<Marten.Testing.Acceptance.PropVersionedDoc>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<System.Guid>(2, token);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingPropVersionedDocSelector1713479038
    
    
    // START: OverwritePropVersionedDocOperation1713479038
    public class OverwritePropVersionedDocOperation1713479038 : Marten.Internal.Operations.StorageOperation<Marten.Testing.Acceptance.PropVersionedDoc, int>
    {
        private readonly Marten.Testing.Acceptance.PropVersionedDoc _document;
        private readonly int _id;
        private readonly System.Collections.Generic.Dictionary<int, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public OverwritePropVersionedDocOperation1713479038(Marten.Testing.Acceptance.PropVersionedDoc document, int id, System.Collections.Generic.Dictionary<int, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_overwrite_propversioneddoc(?, ?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session)
        {
            document.Version = _version;
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
                _document.Version = _version;
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
                _document.Version = _version;
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }

    }

    // END: OverwritePropVersionedDocOperation1713479038
    
    
    // START: QueryOnlyPropVersionedDocDocumentStorage1713479038
    public class QueryOnlyPropVersionedDocDocumentStorage1713479038 : Marten.Internal.Storage.QueryOnlyDocumentStorage<Marten.Testing.Acceptance.PropVersionedDoc, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyPropVersionedDocDocumentStorage1713479038(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(Marten.Testing.Acceptance.PropVersionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(Marten.Testing.Acceptance.PropVersionedDoc)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdatePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertPropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertPropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );
        }


        public override int Identity(Marten.Testing.Acceptance.PropVersionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyPropVersionedDocSelector1713479038(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: QueryOnlyPropVersionedDocDocumentStorage1713479038
    
    
    // START: LightweightPropVersionedDocDocumentStorage1713479038
    public class LightweightPropVersionedDocDocumentStorage1713479038 : Marten.Internal.Storage.LightweightDocumentStorage<Marten.Testing.Acceptance.PropVersionedDoc, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightPropVersionedDocDocumentStorage1713479038(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(Marten.Testing.Acceptance.PropVersionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(Marten.Testing.Acceptance.PropVersionedDoc)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdatePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertPropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertPropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );
        }


        public override int Identity(Marten.Testing.Acceptance.PropVersionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightPropVersionedDocSelector1713479038(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: LightweightPropVersionedDocDocumentStorage1713479038
    
    
    // START: IdentityMapPropVersionedDocDocumentStorage1713479038
    public class IdentityMapPropVersionedDocDocumentStorage1713479038 : Marten.Internal.Storage.IdentityMapDocumentStorage<Marten.Testing.Acceptance.PropVersionedDoc, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapPropVersionedDocDocumentStorage1713479038(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(Marten.Testing.Acceptance.PropVersionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(Marten.Testing.Acceptance.PropVersionedDoc)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdatePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertPropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertPropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );
        }


        public override int Identity(Marten.Testing.Acceptance.PropVersionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapPropVersionedDocSelector1713479038(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: IdentityMapPropVersionedDocDocumentStorage1713479038
    
    
    // START: DirtyTrackingPropVersionedDocDocumentStorage1713479038
    public class DirtyTrackingPropVersionedDocDocumentStorage1713479038 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<Marten.Testing.Acceptance.PropVersionedDoc, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingPropVersionedDocDocumentStorage1713479038(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(Marten.Testing.Acceptance.PropVersionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(Marten.Testing.Acceptance.PropVersionedDoc)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdatePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertPropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertPropVersionedDocOperation1713479038
                (
                    document, Identity(document),
                    session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwritePropVersionedDocOperation1713479038
            (
                document, Identity(document),
                session.Versions.ForType<Marten.Testing.Acceptance.PropVersionedDoc, int>(),
                _document
                
            );
        }


        public override int Identity(Marten.Testing.Acceptance.PropVersionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingPropVersionedDocSelector1713479038(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: DirtyTrackingPropVersionedDocDocumentStorage1713479038
    
    
    // START: PropVersionedDocBulkLoader1713479038
    public class PropVersionedDocBulkLoader1713479038 : Marten.Internal.CodeGeneration.BulkLoader<Marten.Testing.Acceptance.PropVersionedDoc, int>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<Marten.Testing.Acceptance.PropVersionedDoc, int> _storage;

        public PropVersionedDocBulkLoader1713479038(Marten.Internal.Storage.IDocumentStorage<Marten.Testing.Acceptance.PropVersionedDoc, int> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_propversioneddoc(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_propversioneddoc_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_propversioneddoc (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", mt_last_modified) (select mt_doc_propversioneddoc_temp.\"id\", mt_doc_propversioneddoc_temp.\"data\", mt_doc_propversioneddoc_temp.\"mt_version\", mt_doc_propversioneddoc_temp.\"mt_dotnet_type\", transaction_timestamp() from mt_doc_propversioneddoc_temp left join public.mt_doc_propversioneddoc on mt_doc_propversioneddoc_temp.id = public.mt_doc_propversioneddoc.id where public.mt_doc_propversioneddoc.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_propversioneddoc target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_last_modified = transaction_timestamp() FROM mt_doc_propversioneddoc_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_propversioneddoc_temp as select * from public.mt_doc_propversioneddoc limit 0";


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Integer);

            var version = Marten.Schema.Identity.CombGuidIdGeneration.NewGuid();
            writer.Write(version, NpgsqlTypes.NpgsqlDbType.Uuid);
            document.Version = version;
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, Marten.Testing.Acceptance.PropVersionedDoc document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Integer, cancellation);

            var version = Marten.Schema.Identity.CombGuidIdGeneration.NewGuid();
            writer.Write(version, NpgsqlTypes.NpgsqlDbType.Uuid);
            document.Version = version;
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }

    }

    // END: PropVersionedDocBulkLoader1713479038
    
    
    // START: PropVersionedDocProvider1713479038
    public class PropVersionedDocProvider1713479038 : Marten.Internal.Storage.DocumentProvider<Marten.Testing.Acceptance.PropVersionedDoc>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public PropVersionedDocProvider1713479038(Marten.Schema.DocumentMapping mapping) : base(new PropVersionedDocBulkLoader1713479038(new QueryOnlyPropVersionedDocDocumentStorage1713479038(mapping)), new QueryOnlyPropVersionedDocDocumentStorage1713479038(mapping), new LightweightPropVersionedDocDocumentStorage1713479038(mapping), new IdentityMapPropVersionedDocDocumentStorage1713479038(mapping), new DirtyTrackingPropVersionedDocDocumentStorage1713479038(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: PropVersionedDocProvider1713479038
    
    
}

