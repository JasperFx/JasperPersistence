#if NET
// <auto-generated/>

#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using Marten.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: AggregateProjectionLiveAggregation1286072425
    public class AggregateProjectionLiveAggregation1286072425 : Marten.Events.Aggregation.SyncLiveAggregatorBase<Marten.Testing.Events.Aggregation.RoomsAvailability>
    {
        private readonly Marten.Events.Aggregation.AggregateProjection<Marten.Testing.Events.Aggregation.RoomsAvailability> _aggregateProjection;

        public AggregateProjectionLiveAggregation1286072425(Marten.Events.Aggregation.AggregateProjection<Marten.Testing.Events.Aggregation.RoomsAvailability> aggregateProjection)
        {
            _aggregateProjection = aggregateProjection;
        }



        public override Marten.Testing.Events.Aggregation.RoomsAvailability Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, Marten.Testing.Events.Aggregation.RoomsAvailability snapshot)
        {
            if (!events.Any()) return null;
            Marten.Testing.Events.Aggregation.RoomsAvailability roomsAvailability = null;
            snapshot ??= Create(events[0], session);
            foreach (var @event in events)
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public Marten.Testing.Events.Aggregation.RoomsAvailability Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return new Marten.Testing.Events.Aggregation.RoomsAvailability();
        }


        public Marten.Testing.Events.Aggregation.RoomsAvailability Apply(Marten.Events.IEvent @event, Marten.Testing.Events.Aggregation.RoomsAvailability aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Marten.Testing.Events.Aggregation.HotelRoomsDefined> event_HotelRoomsDefined225:
                    aggregate.Apply(event_HotelRoomsDefined225.Data);
                    break;
                case Marten.Events.IEvent<Marten.Testing.Events.Aggregation.RoomBooked> event_RoomBooked226:
                    aggregate.Apply(event_RoomBooked226.Data);
                    break;
                case Marten.Events.IEvent<Marten.Testing.Events.Aggregation.GuestCheckedOut> event_GuestCheckedOut227:
                    aggregate.Apply(event_GuestCheckedOut227.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: AggregateProjectionLiveAggregation1286072425


    // START: AggregateProjectionInlineHandler1286072425
    public class AggregateProjectionInlineHandler1286072425 : Marten.Events.Aggregation.AggregationRuntime<Marten.Testing.Events.Aggregation.RoomsAvailability, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<Marten.Testing.Events.Aggregation.RoomsAvailability, System.Guid> _slicer;
        private readonly Marten.Storage.ITenancy _tenancy;
        private readonly Marten.Internal.Storage.IDocumentStorage<Marten.Testing.Events.Aggregation.RoomsAvailability, System.Guid> _storage;
        private readonly Marten.Events.Aggregation.AggregateProjection<Marten.Testing.Events.Aggregation.RoomsAvailability> _aggregateProjection;

        public AggregateProjectionInlineHandler1286072425(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<Marten.Testing.Events.Aggregation.RoomsAvailability, System.Guid> slicer, Marten.Storage.ITenancy tenancy, Marten.Internal.Storage.IDocumentStorage<Marten.Testing.Events.Aggregation.RoomsAvailability, System.Guid> storage, Marten.Events.Aggregation.AggregateProjection<Marten.Testing.Events.Aggregation.RoomsAvailability> aggregateProjection) : base(store, projection, slicer, tenancy, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _tenancy = tenancy;
            _storage = storage;
            _aggregateProjection = aggregateProjection;
        }



        public override async System.Threading.Tasks.ValueTask<Marten.Testing.Events.Aggregation.RoomsAvailability> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<Marten.Testing.Events.Aggregation.RoomsAvailability, System.Guid> slice, Marten.Events.IEvent evt, Marten.Testing.Events.Aggregation.RoomsAvailability aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<Marten.Testing.Events.Aggregation.HotelRoomsDefined> event_HotelRoomsDefined228:
                    aggregate ??= new Marten.Testing.Events.Aggregation.RoomsAvailability();
                    aggregate.Apply(event_HotelRoomsDefined228.Data);
                    return aggregate;
                case Marten.Events.IEvent<Marten.Testing.Events.Aggregation.RoomBooked> event_RoomBooked229:
                    aggregate ??= new Marten.Testing.Events.Aggregation.RoomsAvailability();
                    aggregate.Apply(event_RoomBooked229.Data);
                    return aggregate;
                case Marten.Events.IEvent<Marten.Testing.Events.Aggregation.GuestCheckedOut> event_GuestCheckedOut230:
                    aggregate ??= new Marten.Testing.Events.Aggregation.RoomsAvailability();
                    aggregate.Apply(event_GuestCheckedOut230.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public Marten.Testing.Events.Aggregation.RoomsAvailability Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return new Marten.Testing.Events.Aggregation.RoomsAvailability();
        }

    }

    // END: AggregateProjectionInlineHandler1286072425


}
#endif
