#if NET
// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using Marten.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: AggregateProjectionLiveAggregation1201339788
    public class AggregateProjectionLiveAggregation1201339788 : Marten.Events.Aggregation.SyncLiveAggregatorBase<EventSourcingTests.Aggregation.Invoice>
    {
        private readonly Marten.Events.Aggregation.AggregateProjection<EventSourcingTests.Aggregation.Invoice> _aggregateProjection;

        public AggregateProjectionLiveAggregation1201339788(Marten.Events.Aggregation.AggregateProjection<EventSourcingTests.Aggregation.Invoice> aggregateProjection)
        {
            _aggregateProjection = aggregateProjection;
        }



        public override EventSourcingTests.Aggregation.Invoice Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, EventSourcingTests.Aggregation.Invoice snapshot)
        {
            if (!events.Any()) return null;
            EventSourcingTests.Aggregation.Invoice invoice = null;
            snapshot ??= Create(events[0], session);
            foreach (var @event in events)
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public EventSourcingTests.Aggregation.Invoice Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return new EventSourcingTests.Aggregation.Invoice();
        }


        public EventSourcingTests.Aggregation.Invoice Apply(Marten.Events.IEvent @event, EventSourcingTests.Aggregation.Invoice aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<EventSourcingTests.Aggregation.InvoiceInitiated> event_InvoiceInitiated91:
                    aggregate.Apply(event_InvoiceInitiated91.Data);
                    break;
                case Marten.Events.IEvent<EventSourcingTests.Aggregation.InvoiceIssued> event_InvoiceIssued92:
                    aggregate.Apply(event_InvoiceIssued92.Data);
                    break;
                case Marten.Events.IEvent<EventSourcingTests.Aggregation.InvoiceSent> event_InvoiceSent93:
                    aggregate.Apply(event_InvoiceSent93.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: AggregateProjectionLiveAggregation1201339788


    // START: AggregateProjectionInlineHandler1201339788
    public class AggregateProjectionInlineHandler1201339788 : Marten.Events.Aggregation.AggregationRuntime<EventSourcingTests.Aggregation.Invoice, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<EventSourcingTests.Aggregation.Invoice, System.Guid> _slicer;
        private readonly Marten.Storage.ITenancy _tenancy;
        private readonly Marten.Internal.Storage.IDocumentStorage<EventSourcingTests.Aggregation.Invoice, System.Guid> _storage;
        private readonly Marten.Events.Aggregation.AggregateProjection<EventSourcingTests.Aggregation.Invoice> _aggregateProjection;

        public AggregateProjectionInlineHandler1201339788(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<EventSourcingTests.Aggregation.Invoice, System.Guid> slicer, Marten.Storage.ITenancy tenancy, Marten.Internal.Storage.IDocumentStorage<EventSourcingTests.Aggregation.Invoice, System.Guid> storage, Marten.Events.Aggregation.AggregateProjection<EventSourcingTests.Aggregation.Invoice> aggregateProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _tenancy = tenancy;
            _storage = storage;
            _aggregateProjection = aggregateProjection;
        }



        public override async System.Threading.Tasks.ValueTask<EventSourcingTests.Aggregation.Invoice> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<EventSourcingTests.Aggregation.Invoice, System.Guid> slice, Marten.Events.IEvent evt, EventSourcingTests.Aggregation.Invoice aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<EventSourcingTests.Aggregation.InvoiceInitiated> event_InvoiceInitiated94:
                    aggregate ??= new EventSourcingTests.Aggregation.Invoice();
                    aggregate.Apply(event_InvoiceInitiated94.Data);
                    return aggregate;
                case Marten.Events.IEvent<EventSourcingTests.Aggregation.InvoiceIssued> event_InvoiceIssued95:
                    aggregate ??= new EventSourcingTests.Aggregation.Invoice();
                    aggregate.Apply(event_InvoiceIssued95.Data);
                    return aggregate;
                case Marten.Events.IEvent<EventSourcingTests.Aggregation.InvoiceSent> event_InvoiceSent96:
                    aggregate ??= new EventSourcingTests.Aggregation.Invoice();
                    aggregate.Apply(event_InvoiceSent96.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public EventSourcingTests.Aggregation.Invoice Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return new EventSourcingTests.Aggregation.Invoice();
        }

    }

    // END: AggregateProjectionInlineHandler1201339788


}
#endif
