// <auto-generated/>
#pragma warning disable
using DocumentDbTests.Reading.Includes;
using Marten.Internal.CompiledQueries;
using Marten.Linq.QueryHandlers;
using System;

namespace Marten.Generated.CompiledQueries
{
    // START: QueryOnlyIssueByTitleWithAssigneeCompiledQuery113072566
    public class QueryOnlyIssueByTitleWithAssigneeCompiledQuery113072566 : Marten.Internal.CompiledQueries.ComplexCompiledQuery<Marten.Testing.Documents.Issue, DocumentDbTests.Reading.Includes.end_to_end_query_with_compiled_include_Tests.IssueByTitleWithAssignee>
    {
        private readonly Marten.Linq.QueryHandlers.IMaybeStatefulHandler _inner;
        private readonly DocumentDbTests.Reading.Includes.end_to_end_query_with_compiled_include_Tests.IssueByTitleWithAssignee _query;
        private readonly Marten.Internal.CompiledQueries.HardCodedParameters _hardcoded;

        public QueryOnlyIssueByTitleWithAssigneeCompiledQuery113072566(Marten.Linq.QueryHandlers.IMaybeStatefulHandler inner, DocumentDbTests.Reading.Includes.end_to_end_query_with_compiled_include_Tests.IssueByTitleWithAssignee query, Marten.Internal.CompiledQueries.HardCodedParameters hardcoded) : base(inner, query, hardcoded)
        {
            _inner = inner;
            _query = query;
            _hardcoded = hardcoded;
        }



        public override void ConfigureCommand(Weasel.Postgresql.CommandBuilder builder, Marten.Internal.IMartenSession session)
        {
            var parameters = builder.AppendWithParameters(@"drop table if exists mt_temp_id_list1;
            create temp table mt_temp_id_list1 as (
            select id, CAST(d.data ->> 'AssigneeId' as uuid) as id1 from public.mt_doc_issue as d  where d.data ->> 'Title' = ?
            ); select d.data from public.mt_doc_user as d where id in (select id1 from mt_temp_id_list1);
             select d.data from public.mt_doc_issue as d where id in (select id from mt_temp_id_list1)");

            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;
            parameters[0].Value = _query.Title;
        }


        public override Marten.Linq.QueryHandlers.IQueryHandler<Marten.Testing.Documents.Issue> BuildHandler(Marten.Internal.IMartenSession session)
        {
            var cloned = _inner.CloneForSession(session, null);
            var includeWriters = new Marten.Linq.Includes.IIncludeReader[]{Marten.Linq.Includes.Include.ReaderToList(session, _query.Included)};
            var included = new Marten.Linq.Includes.IncludeQueryHandler<Marten.Testing.Documents.Issue>((Marten.Linq.QueryHandlers.IQueryHandler<Marten.Testing.Documents.Issue>)cloned, includeWriters);
            return included;
        }

    }

    // END: QueryOnlyIssueByTitleWithAssigneeCompiledQuery113072566
    
    
    // START: QueryOnlyIssueByTitleWithAssigneeCompiledQuerySource113072566
    public class QueryOnlyIssueByTitleWithAssigneeCompiledQuerySource113072566 : Marten.Internal.CompiledQueries.CompiledQuerySource<Marten.Testing.Documents.Issue, DocumentDbTests.Reading.Includes.end_to_end_query_with_compiled_include_Tests.IssueByTitleWithAssignee>
    {
        private readonly Marten.Internal.CompiledQueries.HardCodedParameters _hardcoded;
        private readonly Marten.Linq.QueryHandlers.IMaybeStatefulHandler _maybeStatefulHandler;

        public QueryOnlyIssueByTitleWithAssigneeCompiledQuerySource113072566(Marten.Internal.CompiledQueries.HardCodedParameters hardcoded, Marten.Linq.QueryHandlers.IMaybeStatefulHandler maybeStatefulHandler)
        {
            _hardcoded = hardcoded;
            _maybeStatefulHandler = maybeStatefulHandler;
        }



        public override Marten.Linq.QueryHandlers.IQueryHandler<Marten.Testing.Documents.Issue> BuildHandler(DocumentDbTests.Reading.Includes.end_to_end_query_with_compiled_include_Tests.IssueByTitleWithAssignee query, Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.CompiledQueries.QueryOnlyIssueByTitleWithAssigneeCompiledQuery113072566(_maybeStatefulHandler, query, _hardcoded);
        }

    }

    // END: QueryOnlyIssueByTitleWithAssigneeCompiledQuerySource113072566
    
    
}

