// <auto-generated/>
#pragma warning disable
using DocumentDbTests.Metadata;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertAttVersionedDocOperation506859367
    public class UpsertAttVersionedDocOperation506859367 : Marten.Internal.Operations.StorageOperation<DocumentDbTests.Metadata.AttVersionedDoc, int>
    {
        private readonly DocumentDbTests.Metadata.AttVersionedDoc _document;
        private readonly int _id;
        private readonly System.Collections.Generic.Dictionary<int, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertAttVersionedDocOperation506859367(DocumentDbTests.Metadata.AttVersionedDoc document, int id, System.Collections.Generic.Dictionary<int, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_upsert_attversioneddoc(?, ?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session)
        {
            document.Version = _version;
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
                _document.Version = _version;
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
                _document.Version = _version;
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }

    }

    // END: UpsertAttVersionedDocOperation506859367
    
    
    // START: InsertAttVersionedDocOperation506859367
    public class InsertAttVersionedDocOperation506859367 : Marten.Internal.Operations.StorageOperation<DocumentDbTests.Metadata.AttVersionedDoc, int>
    {
        private readonly DocumentDbTests.Metadata.AttVersionedDoc _document;
        private readonly int _id;
        private readonly System.Collections.Generic.Dictionary<int, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertAttVersionedDocOperation506859367(DocumentDbTests.Metadata.AttVersionedDoc document, int id, System.Collections.Generic.Dictionary<int, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_insert_attversioneddoc(?, ?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session)
        {
            document.Version = _version;
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
                _document.Version = _version;
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
                _document.Version = _version;
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }

    }

    // END: InsertAttVersionedDocOperation506859367
    
    
    // START: UpdateAttVersionedDocOperation506859367
    public class UpdateAttVersionedDocOperation506859367 : Marten.Internal.Operations.StorageOperation<DocumentDbTests.Metadata.AttVersionedDoc, int>
    {
        private readonly DocumentDbTests.Metadata.AttVersionedDoc _document;
        private readonly int _id;
        private readonly System.Collections.Generic.Dictionary<int, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateAttVersionedDocOperation506859367(DocumentDbTests.Metadata.AttVersionedDoc document, int id, System.Collections.Generic.Dictionary<int, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_update_attversioneddoc(?, ?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session)
        {
            document.Version = _version;
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
                _document.Version = _version;
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
                _document.Version = _version;
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }

    }

    // END: UpdateAttVersionedDocOperation506859367
    
    
    // START: QueryOnlyAttVersionedDocSelector506859367
    public class QueryOnlyAttVersionedDocSelector506859367 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<DocumentDbTests.Metadata.AttVersionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyAttVersionedDocSelector506859367(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public DocumentDbTests.Metadata.AttVersionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {

            DocumentDbTests.Metadata.AttVersionedDoc document;
            document = _serializer.FromJson<DocumentDbTests.Metadata.AttVersionedDoc>(reader, 0);
            var version = reader.GetFieldValue<System.Guid>(1);
            document.Version = version;
            return document;
        }


        public async System.Threading.Tasks.Task<DocumentDbTests.Metadata.AttVersionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            DocumentDbTests.Metadata.AttVersionedDoc document;
            document = await _serializer.FromJsonAsync<DocumentDbTests.Metadata.AttVersionedDoc>(reader, 0, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<System.Guid>(1, token);
            document.Version = version;
            return document;
        }

    }

    // END: QueryOnlyAttVersionedDocSelector506859367
    
    
    // START: LightweightAttVersionedDocSelector506859367
    public class LightweightAttVersionedDocSelector506859367 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<DocumentDbTests.Metadata.AttVersionedDoc, int>, Marten.Linq.Selectors.ISelector<DocumentDbTests.Metadata.AttVersionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightAttVersionedDocSelector506859367(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public DocumentDbTests.Metadata.AttVersionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<int>(0);

            DocumentDbTests.Metadata.AttVersionedDoc document;
            document = _serializer.FromJson<DocumentDbTests.Metadata.AttVersionedDoc>(reader, 1);
            var version = reader.GetFieldValue<System.Guid>(2);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<DocumentDbTests.Metadata.AttVersionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<int>(0, token);

            DocumentDbTests.Metadata.AttVersionedDoc document;
            document = await _serializer.FromJsonAsync<DocumentDbTests.Metadata.AttVersionedDoc>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<System.Guid>(2, token);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightAttVersionedDocSelector506859367
    
    
    // START: IdentityMapAttVersionedDocSelector506859367
    public class IdentityMapAttVersionedDocSelector506859367 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<DocumentDbTests.Metadata.AttVersionedDoc, int>, Marten.Linq.Selectors.ISelector<DocumentDbTests.Metadata.AttVersionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapAttVersionedDocSelector506859367(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public DocumentDbTests.Metadata.AttVersionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<int>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            DocumentDbTests.Metadata.AttVersionedDoc document;
            document = _serializer.FromJson<DocumentDbTests.Metadata.AttVersionedDoc>(reader, 1);
            var version = reader.GetFieldValue<System.Guid>(2);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<DocumentDbTests.Metadata.AttVersionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<int>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            DocumentDbTests.Metadata.AttVersionedDoc document;
            document = await _serializer.FromJsonAsync<DocumentDbTests.Metadata.AttVersionedDoc>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<System.Guid>(2, token);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapAttVersionedDocSelector506859367
    
    
    // START: DirtyTrackingAttVersionedDocSelector506859367
    public class DirtyTrackingAttVersionedDocSelector506859367 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<DocumentDbTests.Metadata.AttVersionedDoc, int>, Marten.Linq.Selectors.ISelector<DocumentDbTests.Metadata.AttVersionedDoc>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingAttVersionedDocSelector506859367(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public DocumentDbTests.Metadata.AttVersionedDoc Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<int>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            DocumentDbTests.Metadata.AttVersionedDoc document;
            document = _serializer.FromJson<DocumentDbTests.Metadata.AttVersionedDoc>(reader, 1);
            var version = reader.GetFieldValue<System.Guid>(2);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<DocumentDbTests.Metadata.AttVersionedDoc> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<int>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            DocumentDbTests.Metadata.AttVersionedDoc document;
            document = await _serializer.FromJsonAsync<DocumentDbTests.Metadata.AttVersionedDoc>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<System.Guid>(2, token);
            _versions[id] = version;
            document.Version = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingAttVersionedDocSelector506859367
    
    
    // START: OverwriteAttVersionedDocOperation506859367
    public class OverwriteAttVersionedDocOperation506859367 : Marten.Internal.Operations.StorageOperation<DocumentDbTests.Metadata.AttVersionedDoc, int>
    {
        private readonly DocumentDbTests.Metadata.AttVersionedDoc _document;
        private readonly int _id;
        private readonly System.Collections.Generic.Dictionary<int, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public OverwriteAttVersionedDocOperation506859367(DocumentDbTests.Metadata.AttVersionedDoc document, int id, System.Collections.Generic.Dictionary<int, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_overwrite_attversioneddoc(?, ?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session)
        {
            document.Version = _version;
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
                _document.Version = _version;
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
                _document.Version = _version;
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }

    }

    // END: OverwriteAttVersionedDocOperation506859367
    
    
    // START: QueryOnlyAttVersionedDocDocumentStorage506859367
    public class QueryOnlyAttVersionedDocDocumentStorage506859367 : Marten.Internal.Storage.QueryOnlyDocumentStorage<DocumentDbTests.Metadata.AttVersionedDoc, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyAttVersionedDocDocumentStorage506859367(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(DocumentDbTests.Metadata.AttVersionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(DocumentDbTests.Metadata.AttVersionedDoc)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );
        }


        public override int Identity(DocumentDbTests.Metadata.AttVersionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyAttVersionedDocSelector506859367(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: QueryOnlyAttVersionedDocDocumentStorage506859367
    
    
    // START: LightweightAttVersionedDocDocumentStorage506859367
    public class LightweightAttVersionedDocDocumentStorage506859367 : Marten.Internal.Storage.LightweightDocumentStorage<DocumentDbTests.Metadata.AttVersionedDoc, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightAttVersionedDocDocumentStorage506859367(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(DocumentDbTests.Metadata.AttVersionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(DocumentDbTests.Metadata.AttVersionedDoc)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );
        }


        public override int Identity(DocumentDbTests.Metadata.AttVersionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightAttVersionedDocSelector506859367(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: LightweightAttVersionedDocDocumentStorage506859367
    
    
    // START: IdentityMapAttVersionedDocDocumentStorage506859367
    public class IdentityMapAttVersionedDocDocumentStorage506859367 : Marten.Internal.Storage.IdentityMapDocumentStorage<DocumentDbTests.Metadata.AttVersionedDoc, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapAttVersionedDocDocumentStorage506859367(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(DocumentDbTests.Metadata.AttVersionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(DocumentDbTests.Metadata.AttVersionedDoc)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );
        }


        public override int Identity(DocumentDbTests.Metadata.AttVersionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapAttVersionedDocSelector506859367(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: IdentityMapAttVersionedDocDocumentStorage506859367
    
    
    // START: DirtyTrackingAttVersionedDocDocumentStorage506859367
    public class DirtyTrackingAttVersionedDocDocumentStorage506859367 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<DocumentDbTests.Metadata.AttVersionedDoc, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingAttVersionedDocDocumentStorage506859367(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(DocumentDbTests.Metadata.AttVersionedDoc document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(DocumentDbTests.Metadata.AttVersionedDoc)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertAttVersionedDocOperation506859367
                (
                    document, Identity(document),
                    session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteAttVersionedDocOperation506859367
            (
                document, Identity(document),
                session.Versions.ForType<DocumentDbTests.Metadata.AttVersionedDoc, int>(),
                _document
                
            );
        }


        public override int Identity(DocumentDbTests.Metadata.AttVersionedDoc document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingAttVersionedDocSelector506859367(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: DirtyTrackingAttVersionedDocDocumentStorage506859367
    
    
    // START: AttVersionedDocBulkLoader506859367
    public class AttVersionedDocBulkLoader506859367 : Marten.Internal.CodeGeneration.BulkLoader<DocumentDbTests.Metadata.AttVersionedDoc, int>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<DocumentDbTests.Metadata.AttVersionedDoc, int> _storage;

        public AttVersionedDocBulkLoader506859367(Marten.Internal.Storage.IDocumentStorage<DocumentDbTests.Metadata.AttVersionedDoc, int> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_attversioneddoc(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_attversioneddoc_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_attversioneddoc (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", mt_last_modified) (select mt_doc_attversioneddoc_temp.\"id\", mt_doc_attversioneddoc_temp.\"data\", mt_doc_attversioneddoc_temp.\"mt_version\", mt_doc_attversioneddoc_temp.\"mt_dotnet_type\", transaction_timestamp() from mt_doc_attversioneddoc_temp left join public.mt_doc_attversioneddoc on mt_doc_attversioneddoc_temp.id = public.mt_doc_attversioneddoc.id where public.mt_doc_attversioneddoc.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_attversioneddoc target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_last_modified = transaction_timestamp() FROM mt_doc_attversioneddoc_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_attversioneddoc_temp as select * from public.mt_doc_attversioneddoc limit 0";


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Integer);

            var version = Marten.Schema.Identity.CombGuidIdGeneration.NewGuid();
            writer.Write(version, NpgsqlTypes.NpgsqlDbType.Uuid);
            document.Version = version;
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, DocumentDbTests.Metadata.AttVersionedDoc document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Integer, cancellation);

            var version = Marten.Schema.Identity.CombGuidIdGeneration.NewGuid();
            writer.Write(version, NpgsqlTypes.NpgsqlDbType.Uuid);
            document.Version = version;
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }

    }

    // END: AttVersionedDocBulkLoader506859367
    
    
    // START: AttVersionedDocProvider506859367
    public class AttVersionedDocProvider506859367 : Marten.Internal.Storage.DocumentProvider<DocumentDbTests.Metadata.AttVersionedDoc>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public AttVersionedDocProvider506859367(Marten.Schema.DocumentMapping mapping) : base(new AttVersionedDocBulkLoader506859367(new QueryOnlyAttVersionedDocDocumentStorage506859367(mapping)), new QueryOnlyAttVersionedDocDocumentStorage506859367(mapping), new LightweightAttVersionedDocDocumentStorage506859367(mapping), new IdentityMapAttVersionedDocDocumentStorage506859367(mapping), new DirtyTrackingAttVersionedDocDocumentStorage506859367(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: AttVersionedDocProvider506859367
    
    
}

